# services:
#   mysql:
#     image: mysql:8.4
#     container_name: db
#     ports:
#       - "3306:3306"  # MySQL default port
#     env_file:
#       - ./env/db/.env
#     volumes:
#       - mysql_data:/var/lib/mysql
#     networks:
#       - my_app_net
#     restart: unless-stopped
#     healthcheck:
#       test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
#       interval: 20s       # check every 10 seconds
#       timeout: 20s        # allow 10s for each check
#       retries: 15         # try 10 times before giving up (10 x 10s = ~100s max)
#       start_period: 40s   # give MySQL up to 20s to warm up before starting checks


#   api:
#     build:
#       context: backend
#       dockerfile: Dockerfile
#     container_name: api
#     depends_on:
#       mysql:
#         condition: service_healthy
#     restart: on-failure
#     ports:
#       - "8080:8080"
#     env_file:
#       - ./env/backend/.env
#     networks:
#       - my_app_net
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8080/docs"]
#       interval: 30s
#       timeout: 10s
#       retries: 5

# volumes:
#   mysql_data:

# networks:
#   my_app_net:
#     driver: bridge




services:
  mysql:
    image: mysql:8.4
    container_name: db
    ports:
      - "3306:3306"  # MySQL default port
    env_file:
      - ./env/db/.env
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - my_app_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-Klizos@123}"]
      interval: 20s        # Wait longer between retries
      timeout: 20s         # Allow more time per check
      retries: 15          # Retry more times before giving up
      start_period: 40s    # Initial grace period to allow MySQL to warm up

  api:
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: api
    depends_on:
      mysql:
        condition: service_healthy
    restart: on-failure
    ports:
      - "8080:8080"
    env_file:
      - ./env/backend/.env
    networks:
      - my_app_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/docs"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  mysql_data:

networks:
  my_app_net:
    driver: bridge
