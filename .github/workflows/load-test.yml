name: Python Backend Load Tests

on:
  workflow_call:
    secrets:
      BACKEND_PORT:
        required: true
      BACKEND_DEBUG:
        required: true
      DB_MYSQL_ROOT_PASSWORD:
        required: true
      DB_MYSQL_DATABASE:
        required: true
      DB_MYSQL_USER:
        required: true
      DB_MYSQL_PASSWORD:
        required: true
      BACKEND_SECRET_KEY:
        required: true
      TEST_MYSQL_HOST:
        required: true
      TEST_MYSQL_PORT:
        required: true
      TEST_MYSQL_DATABASE:
        required: true
      TEST_MYSQL_USER:
        required: true
      TEST_MYSQL_PASSWORD:
        required: true
      TEST_ENV:
        required: true
      TEST_SECRET_KEY:
        required: true

jobs:
  run-load-tests:
    runs-on: ubuntu-latest

    env:
      MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
      MYSQL_USER: ${{ secrets.DB_MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u${MYSQL_USER} -p${MYSQL_PASSWORD}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Export environment variables to GITHUB_ENV
        run: |
          echo "PORT=${{ secrets.BACKEND_PORT }}" >> $GITHUB_ENV
          echo "DEBUG=${{ secrets.BACKEND_DEBUG }}" >> $GITHUB_ENV
          echo "MYSQL_DATABASE=${{ secrets.DB_MYSQL_DATABASE }}" >> $GITHUB_ENV
          echo "MYSQL_USER=${{ secrets.DB_MYSQL_USER }}" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=${{ secrets.DB_MYSQL_PASSWORD }}" >> $GITHUB_ENV
          echo "MYSQL_HOST=${{ secrets.TEST_MYSQL_HOST }}" >> $GITHUB_ENV
          echo "MYSQL_PORT=${{ secrets.TEST_MYSQL_PORT }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.BACKEND_SECRET_KEY }}" >> $GITHUB_ENV
          echo "ENV=${{ secrets.TEST_ENV }}" >> $GITHUB_ENV
          echo "TEST_SECRET_KEY=${{ secrets.TEST_SECRET_KEY }}" >> $GITHUB_ENV
          echo "PYTHONPATH=backend" >> $GITHUB_ENV

      - name: Initialize DB schema
        run: python -c "import asyncio; from app.db import initialize_db; asyncio.run(initialize_db())"
        working-directory: backend
        env:
          PYTHONPATH: backend
          ENV: ${{ secrets.TEST_ENV }}
          SECRET_KEY: ${{ secrets.TEST_SECRET_KEY }}
          MYSQL_HOST: ${{ secrets.TEST_MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.TEST_MYSQL_PORT }}
          MYSQL_DATABASE: ${{ secrets.TEST_MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.TEST_MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.TEST_MYSQL_PASSWORD }}

      - name: Start backend server
        run: |
          nohup uvicorn app.main:app --host 0.0.0.0 --port $PORT &
          sleep 5
        working-directory: backend
        env:
          PYTHONPATH: backend
          ENV: ${{ secrets.TEST_ENV }}
          SECRET_KEY: ${{ secrets.TEST_SECRET_KEY }}
          MYSQL_HOST: ${{ secrets.TEST_MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.TEST_MYSQL_PORT }}
          MYSQL_DATABASE: ${{ secrets.TEST_MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.TEST_MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.TEST_MYSQL_PASSWORD }}

      - name: Run Locust load tests (headless)
        run: |
          locust -f load_tests/locustfile.py \
            --headless \
            -u 10 -r 2 \
            --run-time 1m \
            --host http://localhost:$PORT

      - name: Clean up Docker containers
        if: always()
        run: docker container prune -f
