name: 🏗️ Reusable Docker Build Workflow

on:
  workflow_call:
    inputs:
      image_tag:
        description: Tag to apply to the Docker image
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # 🔐 Inject environment variables from GitHub Secrets
      - name: 🔐 Write backend env file
        run: |
          mkdir -p env/backend
          echo "${{ secrets.BACKEND_ENV_FILE }}" > env/backend/.env

      - name: 🔐 Write DB env file
        run: |
          mkdir -p env/db
          echo "${{ secrets.MYSQL_ENV_DB }}" > env/db/.env

      - name: 🔐 Write test env file
        run: |
          echo "${{ secrets.TEST_ENV_FILE }}" > .env.test

      # 🐬 Start MySQL container manually
      - name: 🐬 Start MySQL Container
        run: |
          docker run -d \
            --name mysql-container \
            -e MYSQL_ROOT_PASSWORD=Klizos@123 \
            -e MYSQL_DATABASE=user_info \
            -e MYSQL_USER=emp_1 \
            -e MYSQL_PASSWORD=qwerty \
            -p 3306:3306 \
            --health-cmd="mysqladmin ping -h localhost" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=10 \
            mysql:latest

      # 💤 Wait until MySQL container is healthy
      - name: 💤 Wait for MySQL to be healthy
        run: |
          for i in {1..30}; do
            STATUS=$(docker inspect --format='{{json .State.Health.Status}}' mysql-container)
            if [[ "$STATUS" == "\"healthy\"" ]]; then
              echo "✅ MySQL is healthy"
              break
            fi
            echo "⌛ Waiting for MySQL... ($i/30)"
            sleep 3
          done

      # 🐳 Setup Docker build environment
      - name: 🐳 Setup Docker
        uses: ./.github/actions/docker/setup

      # 🏗️ Build Docker image
      - name: 🏗️ Build Docker Image (via Makefile)
        uses: ./.github/actions/docker/build

      # 🐋 Tag Docker image
      - name: 🐋 Tag Built Docker Image
        run: |
          docker tag backend-api:latest backend-api:${{ inputs.image_tag }}

      # 📦 Save image as tarball
      - name: 📦 Save Docker Image to Tarball
        run: |
          docker save backend-api:${{ inputs.image_tag }} -o backend-api-${{ inputs.image_tag }}.tar

      # ⬆️ Upload image artifact
      - name: ⬆️ Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ inputs.image_tag }}
          path: backend-api-${{ inputs.image_tag }}.tar

      # 🧹 Optional cleanup
      - name: 🧹 Clean up MySQL container
        if: always()
        run: docker rm -f mysql-container || true
