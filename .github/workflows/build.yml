name: Reusable Docker Build Workflow

on:
  workflow_call:
    inputs:
      image_tag:
        description: Tag to apply to the Docker image
        required: true
        type: string
    secrets:
      BACKEND_PORT:
        required: true
      BACKEND_DEBUG:
        required: true
      BACKEND_MYSQL_DATABASE:
        required: true
      BACKEND_MYSQL_USER:
        required: true
      BACKEND_MYSQL_PASSWORD:
        required: true
      BACKEND_MYSQL_HOST:
        required: true
      BACKEND_MYSQL_PORT:
        required: true
      BACKEND_SECRET_KEY:
        required: true

      DB_MYSQL_ROOT_PASSWORD:
        required: true
      DB_MYSQL_DATABASE:
        required: true
      DB_MYSQL_USER:
        required: true
      DB_MYSQL_PASSWORD:
        required: true

      TEST_ENV:
        required: false
      TEST_SECRET_KEY:
        required: false
      TEST_MYSQL_HOST:
        required: false
      TEST_MYSQL_PORT:
        required: false
      TEST_MYSQL_DATABASE:
        required: false
      TEST_MYSQL_USER:
        required: false
      TEST_MYSQL_PASSWORD:
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Write backend env file
        run: |
          mkdir -p env/backend
          echo "PORT=${{ secrets.BACKEND_PORT }}" >> env/backend/.env
          echo "DEBUG=${{ secrets.BACKEND_DEBUG }}" >> env/backend/.env
          echo "MYSQL_DATABASE=${{ secrets.BACKEND_MYSQL_DATABASE }}" >> env/backend/.env
          echo "MYSQL_USER=${{ secrets.BACKEND_MYSQL_USER }}" >> env/backend/.env
          echo "MYSQL_PASSWORD=${{ secrets.BACKEND_MYSQL_PASSWORD }}" >> env/backend/.env
          echo "MYSQL_HOST=${{ secrets.BACKEND_MYSQL_HOST }}" >> env/backend/.env
          echo "MYSQL_PORT=${{ secrets.BACKEND_MYSQL_PORT }}" >> env/backend/.env
          echo "SECRET_KEY=${{ secrets.BACKEND_SECRET_KEY }}" >> env/backend/.env

      - name: Write DB env file
        run: |
          mkdir -p env/db
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.DB_MYSQL_ROOT_PASSWORD }}" >> env/db/.env
          echo "MYSQL_DATABASE=${{ secrets.DB_MYSQL_DATABASE }}" >> env/db/.env
          echo "MYSQL_USER=${{ secrets.DB_MYSQL_USER }}" >> env/db/.env
          echo "MYSQL_PASSWORD=${{ secrets.DB_MYSQL_PASSWORD }}" >> env/db/.env

      - name: Write test env file
        run: |
          echo "ENV=${{ secrets.TEST_ENV }}" >> .env.test
          echo "SECRET_KEY=${{ secrets.TEST_SECRET_KEY }}" >> .env.test
          echo "MYSQL_HOST=${{ secrets.TEST_MYSQL_HOST }}" >> .env.test
          echo "MYSQL_PORT=${{ secrets.TEST_MYSQL_PORT }}" >> .env.test
          echo "MYSQL_DATABASE=${{ secrets.TEST_MYSQL_DATABASE }}" >> .env.test
          echo "MYSQL_USER=${{ secrets.TEST_MYSQL_USER }}" >> .env.test
          echo "MYSQL_PASSWORD=${{ secrets.TEST_MYSQL_PASSWORD }}" >> .env.test

      - name: Start MySQL Container
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.DB_MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
        run: |
          docker run -d \
            --name mysql-container \
            -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD \
            -e MYSQL_DATABASE=$MYSQL_DATABASE \
            -e MYSQL_USER=$MYSQL_USER \
            -e MYSQL_PASSWORD=$MYSQL_PASSWORD \
            -p 3306:3306 \
            --health-cmd="mysqladmin ping -h localhost" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=10 \
            mysql:latest

      - name: Wait for MySQL to be healthy
        run: |
          for i in {1..30}; do
            STATUS=$(docker inspect --format='{{json .State.Health.Status}}' mysql-container)
            if [[ "$STATUS" == "\"healthy\"" ]]; then
              echo "MySQL is healthy"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 3
          done

      - name: Setup Docker
        uses: ./.github/actions/docker/setup

      - name: Build Docker Image
        uses: ./.github/actions/docker/build
        with:
          image_tag: ${{ inputs.image_tag }}

      - name: Save Docker Image to Tarball
        run: |
          docker save backend-api:${{ inputs.image_tag }} -o backend-api-${{ inputs.image_tag }}.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ inputs.image_tag }}
          path: backend-api-${{ inputs.image_tag }}.tar

      - name: Clean Up MySQL Container
        if: always()
        run: docker rm -f mysql-container || true
