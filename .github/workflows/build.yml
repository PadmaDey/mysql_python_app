name: 🏗️ Reusable Docker Build Workflow

on:
  workflow_call:
    inputs:
      image_tag:
        description: Tag to apply to the Docker image
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # 🐬 Start MySQL container with explicit environment variables
      - name: 🐬 Start MySQL Container
        run: |
          docker run -d \
            --name mysql-container \
            -e MYSQL_ROOT_PASSWORD=Klizos@123 \
            -e MYSQL_DATABASE=user_info \
            -e MYSQL_USER=emp_1 \
            -e MYSQL_PASSWORD=qwerty \
            -p 3306:3306 \
            --health-cmd="mysqladmin ping -h localhost" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=10 \
            mysql:latest

      # 💤 Wait until MySQL container becomes healthy
      - name: 💤 Wait for MySQL to be healthy
        run: |
          for i in {1..30}; do
            STATUS=$(docker inspect --format='{{json .State.Health.Status}}' mysql-container)
            if [[ "$STATUS" == "\"healthy\"" ]]; then
              echo "✅ MySQL is healthy"
              break
            fi
            echo "⌛ Waiting for MySQL... ($i/30)"
            sleep 3
          done

      # 🐳 Set up Docker context
      - name: 🐳 Setup Docker
        uses: ./.github/actions/docker/setup

      # 🏗️ Build Docker image using Makefile logic
      - name: 🏗️ Build Docker Image
        uses: ./.github/actions/docker/build
        env:
          PORT: 8080
          DEBUG: "True"
          SECRET_KEY: 8J4U8p2YbDVCoBr7ZertqnnZJCJieGS1U3A0VohBY
          MYSQL_HOST: mysql
          MYSQL_PORT: "3306"
          MYSQL_DATABASE: user_info
          MYSQL_USER: emp_1
          MYSQL_PASSWORD: qwerty

      # 🐋 Tag Docker image with provided input tag
      - name: 🐋 Tag Docker Image
        run: |
          docker tag backend-api:latest backend-api:${{ inputs.image_tag }}

      # 📦 Save Docker image as tarball
      - name: 📦 Save Docker Image to Tarball
        run: |
          docker save backend-api:${{ inputs.image_tag }} -o backend-api-${{ inputs.image_tag }}.tar

      # ⬆️ Upload Docker image artifact
      - name: ⬆️ Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ inputs.image_tag }}
          path: backend-api-${{ inputs.image_tag }}.tar

      # 🧹 Clean up MySQL container to avoid resource leaks
      - name: 🧹 Clean Up MySQL Container
        if: always()
        run: docker rm -f mysql-container || true
